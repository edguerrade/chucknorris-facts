{"version":3,"sources":["Api.js","ChuckNorrisJokesProvider.js","CategoriesFilter.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["ENDPOINT","Api","getCategories","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","wrap","_context","prev","next","fetch","concat","sent","abrupt","t0","stop","this","apply","arguments","getRandomJoke","category","url","_callee2","_context2","ChuckNorrisJokesProvider","state","list","List","undefined","getJokes","_this","setJokes","fn","setState","getCategory","setCategory","console","log","clear","props","children","Component","CategoriesFilter","categories","componentDidMount","handleChange","selectedOption","value","react_default","createElement","react_select_esm","placeholder","label","toUpperCase","onChange","options","toConsumableArray","sort","map","PureComponent","JokeList","cache","CellMeasurerCache","defaultHeight","minHeight","fixedWidth","_getNRandomJoke","nJokes","jokes","joke","getJoke","push","_isRowLoaded","_ref2","index","_loadMoreRows","_ref3","startIndex","stopIndex","_this$props","onChangeList","increment","size","name","prevList","Array","fill","id","then","splice","_rowRenderer","_ref4","key","parent","style","row","get","customStyle","backgroundColor","color","display","justifyContent","flexDirection","paddingLeft","objectSpread","es","columnIndex","rowIndex","_this2","rowCount","isRowLoaded","loadMoreRows","_ref5","onRowsRendered","registerChild","disableHeight","_ref6","width","ref","height","deferredMeasurementCache","rowHeight","rowRenderer","ReactModal","setAppElement","App","showModal","contentLabel","_handleOpenModal","window","location","hash","onpopstate","_handleCloseModal","_locationBack","history","back","react","src_ChuckNorrisJokesProvider","src_CategoriesFilter","src_JokeList","onClick","lib_default","shouldCloseOnOverlayClick","isOpen","onRequestClose","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a420157.chunk.js","sourcesContent":["const ENDPOINT = 'https://api.chucknorris.io/jokes';\n\nexport const getCategories = async () => {\n  try {\n    const response = await fetch(`${ENDPOINT}/categories`);\n    const json = await response.json();\n    return json;\n  } catch (e) {\n    return [];\n  }\n};\n\n// export const searchJoke = async query => {\n//   const url = `${ENDPOINT}/search$?category=${query}`;\n//   try {\n//     const response = await fetch(url);\n//     const json = await response.json();\n//     return json;\n//   } catch (e) {\n//     //TODO: manage error\n//     return;\n//   }\n// };\n\nexport const getRandomJoke = category => {\n  const url = `${ENDPOINT}/random${category ? `?category=${category}` : ''}`;\n  return async () => {\n    try {\n      const response = await fetch(url);\n      const json = await response.json();\n      return json;\n    } catch (e) {\n      //TODO: manage error\n      return;\n    }\n  };\n};\n\nexport default {\n  getCategories,\n  // searchJoke,\n  getRandomJoke\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\nimport Api from './Api';\n\nclass ChuckNorrisJokesProvider extends Component {\n  state = {\n    list: List(),\n    category: undefined\n  };\n\n  getCategories = Api.getCategories;\n  getRandomJoke = Api.getRandomJoke();\n\n  getJokes = () => this.state.list;\n\n  setJokes = fn =>\n    this.setState(state => {\n      return { list: fn(state.list) };\n    });\n\n  getCategory = () => this.state.category;\n\n  setCategory = category => {\n    if (this.state.category !== category) {\n      this.getRandomJoke = Api.getRandomJoke(category);\n      this.setState(state => {\n        console.log('setCategory', category);\n        return {\n          list: state.list.clear(),\n          category\n        };\n      });\n    }\n  };\n\n  render() {\n    const {\n      getCategory,\n      setCategory,\n      getJokes,\n      setJokes,\n      getCategories,\n      getRandomJoke\n    } = this;\n    return this.props.children({\n      getCategory,\n      setCategory,\n      getCategories,\n      getJokes,\n      setJokes,\n      getRandomJoke\n    });\n  }\n}\n\nChuckNorrisJokesProvider.propTypes = {\n  children: PropTypes.func.isRequired\n};\n\nexport default ChuckNorrisJokesProvider;\n","import React, { PureComponent } from 'react';\nimport Select from 'react-select';\n\nclass CategoriesFilter extends PureComponent {\n  state = {\n    categories: []\n  };\n\n  componentDidMount = async () => {\n    const categories = await this.props.getCategories();\n    this.setState({\n      categories\n    });\n  };\n\n  handleChange = selectedOption =>\n    this.props.handleChange(selectedOption.value);\n\n  render() {\n    const { selectedOption } = this.props;\n    return (\n      <Select\n        placeholder={'Categories...'}\n        value={\n          selectedOption && {\n            value: selectedOption,\n            label: selectedOption.toUpperCase()\n          }\n        }\n        onChange={this.handleChange}\n        options={[\n          { label: 'ALL' },\n          ...this.state.categories.sort().map(category => {\n            return {\n              value: category,\n              label: category.toUpperCase()\n            };\n          })\n        ]}\n      />\n    );\n  }\n}\n\nexport default CategoriesFilter;\n","import React, { PureComponent } from 'react';\nimport {\n  InfiniteLoader,\n  AutoSizer,\n  List,\n  CellMeasurer,\n  CellMeasurerCache\n} from 'react-virtualized';\n\nclass JokeList extends PureComponent {\n  cache = new CellMeasurerCache({\n    defaultHeight: 90,\n    minHeight: 90,\n    fixedWidth: true\n  });\n\n  _getNRandomJoke = async nJokes => {\n    console.log('_getNRandomJoke', nJokes);\n    let jokes = [];\n    while (nJokes) {\n      const joke = await this.props.getJoke();\n      jokes.push(joke);\n      nJokes--;\n    }\n    return jokes;\n  };\n\n  _isRowLoaded = ({ index }) => !!this.props.list[index];\n\n  _loadMoreRows = ({ startIndex, stopIndex }) => {\n    const { list, onChangeList } = this.props;\n    const increment = stopIndex - list.size - 1;\n    console.log({\n      list,\n      startIndex,\n      stopIndex,\n      increment\n    });\n    if (list[stopIndex] || list[startIndex] || increment < 1) {\n      return;\n      //   return onChangeList(prevList => {\n      //     return prevList;\n      //   });\n    }\n\n    console.log({\n      name: 'wohooooooo'\n    });\n    \n    onChangeList(prevList => {\n      return prevList.concat(\n        Array(increment).fill({ id: 0, value: 'Loading...' })\n      );\n    });\n\n    return this._getNRandomJoke(increment).then(jokes => {\n      return onChangeList(prevList => {\n        return prevList.splice(list.size, increment, ...jokes);\n      });\n    });\n  };\n\n  _rowRenderer = ({ index, key, parent, style }) => {\n    const { list } = this.props;\n\n    const row = list.get(index);\n\n    let customStyle = {\n      // Demo style\n      backgroundColor: '#fff',\n      color: '#333',\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      // textAlign: 'center',\n      paddingLeft: '10px'\n    };\n\n    if (index % 2) {\n      customStyle = {\n        ...customStyle,\n        backgroundColor: '#333',\n        color: '#fff'\n      };\n    }\n\n    if (row) {\n      return (\n        <CellMeasurer\n          cache={this.cache}\n          columnIndex={0}\n          key={key}\n          parent={parent}\n          rowIndex={index}\n        >\n          <div\n            key={key}\n            style={{\n              ...style,\n              ...customStyle\n            }}\n          >\n            {this.props.children(row)}\n          </div>\n        </CellMeasurer>\n      );\n    }\n  };\n\n  render() {\n    const { list } = this.props;\n    const rowCount = list.size + 10; // As infinite load we assume that there always be 10 more\n    return (\n      <InfiniteLoader\n        isRowLoaded={this._isRowLoaded}\n        loadMoreRows={this._loadMoreRows}\n        rowCount={rowCount}\n        // threshold={10}\n        // minimumBatchSize={10}\n      >\n        {({ onRowsRendered, registerChild }) => (\n          <AutoSizer disableHeight>\n            {({ /*height,*/ width }) => (\n              <List\n                ref={registerChild}\n                width={width}\n                height={780}\n                // height={height}\n                onRowsRendered={onRowsRendered}\n                rowCount={rowCount}\n                deferredMeasurementCache={this.cache}\n                rowHeight={this.cache.rowHeight}\n                rowRenderer={this._rowRenderer}\n                // overscanRowCount={3}\n              />\n            )}\n          </AutoSizer>\n        )}\n      </InfiniteLoader>\n    );\n  }\n}\n\nexport default JokeList;\n","import React, { Component, Fragment } from 'react';\nimport ReactModal from 'react-modal';\n\nimport ChuckNorrisJokesProvider from './ChuckNorrisJokesProvider';\nimport CategoriesFilter from './CategoriesFilter';\nimport JokeList from './JokeList';\nReactModal.setAppElement('#root');\n\n/* I am guessing you might be familiar with Chuck Norris, and maybe as well Chuck Norris jokes!\nThere is a free api: https://api.chucknorris.io/\nThat gets random chuck norris jokes.\n\nThe idea would be to create a simple web app, that has a feed of random jokes.\nWhen scrolling down on the feed, it will then request more jokes to populate the viewport.\nWhen clicking on a joke, it will isolate the joke.\nWhen going back you would then return to the feed.\n\nYou will also have to provide a way to filter by categories https://api.chucknorris.io/jokes/categories\n\nThe requirements are:\n- ES6 or superior and React should be used for the frontend\n- The project should provide a way to bundle the assets for development and production */\n\n/**\n * @author eguerra\n */\nclass App extends Component {\n  state = {\n    showModal: false,\n    contentLabel: undefined\n  };\n\n  _handleOpenModal = joke => {\n    window.location.hash = `#${joke.id}`\n    window.onpopstate = () => {\n      this._handleCloseModal();\n    };\n    this.setState({\n      showModal: true,\n      contentLabel: joke.value\n    });\n  };\n\n  _locationBack = () => {\n    window.history.back();\n  }\n\n  _handleCloseModal = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <ChuckNorrisJokesProvider>\n          {({\n            getCategory,\n            setCategory,\n            getCategories,\n            getJokes,\n            setJokes,\n            getRandomJoke\n          }) => (\n            <main>\n              <CategoriesFilter\n                getCategories={getCategories}\n                handleChange={setCategory}\n                selectedOption={getCategory()}\n              />\n              <JokeList\n                list={getJokes()}\n                onChangeList={setJokes}\n                getJoke={getRandomJoke}\n              >\n                {joke => {\n                  return (\n                    <div\n                      key={`joke-${joke.id}`}\n                      onClick={() =>\n                        joke.id !== 0 && this._handleOpenModal(joke)\n                      }\n                    >\n                      {joke.value}\n                    </div>\n                  );\n                }}\n              </JokeList>\n            </main>\n          )}\n        </ChuckNorrisJokesProvider>\n        <ReactModal\n          shouldCloseOnOverlayClick\n          isOpen={this.state.showModal}\n          onRequestClose={this._locationBack}\n          contentLabel={this.state.contentLabel}\n        >\n          <h2>Fact</h2>\n          <p>{this.state.contentLabel}</p>\n          <button onClick={this._locationBack}>Close Modal</button>\n        </ReactModal>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}